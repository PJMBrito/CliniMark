// <auto-generated />
using System;
using CliniMark.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CliniMark.API.Migrations
{
    [DbContext(typeof(CliniMarkContext))]
    [Migration("20241010194714_testeFinal")]
    partial class testeFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CliniMark.Domain.Domain.Agendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataMarcacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("Agendamentos", (string)null);
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Colaborador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("Colaboradores", (string)null);
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades", (string)null);
                });

            modelBuilder.Entity("ColaboradorEspecialidade", b =>
                {
                    b.Property<Guid>("ColaboradoresId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EspecialidadesId")
                        .HasColumnType("uuid");

                    b.HasKey("ColaboradoresId", "EspecialidadesId");

                    b.HasIndex("EspecialidadesId");

                    b.ToTable("ColaboradorEspecialidade");
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Agendamento", b =>
                {
                    b.HasOne("CliniMark.Domain.Domain.Cliente", "Cliente")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CliniMark.Domain.Domain.Colaborador", "Colaborador")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CliniMark.Domain.Domain.Especialidade", "Especialidade")
                        .WithMany("Agendamentos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Colaborador");

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("ColaboradorEspecialidade", b =>
                {
                    b.HasOne("CliniMark.Domain.Domain.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("ColaboradoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CliniMark.Domain.Domain.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Cliente", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Colaborador", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("CliniMark.Domain.Domain.Especialidade", b =>
                {
                    b.Navigation("Agendamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
